/*** *	generelle Window-Klasse * *	©1994 Dekotec Info-Sys, Markus Fritze ***/#pragma once#include "GlobalDefines.h"#include "WindowExtensions.h"#include "MenuLib.h"#include <drag.h>// mögliche Windowflags für die Scrap-Verwaltungenum WindowScrapEnum {	wcUndo = (1L<<0),	wcCut = (1L<<1),	wcCopy = (1L<<2),	wcPaste = (1L<<3),	wcClear = (1L<<4),	wcSelectAll = (1L<<5),	wcTracking = (1L<<6),	wcReceiveDrop = (1L<<7)};typedef unsigned long WindowScrapAttributes;class WindowBase : public MenuBase {private:	ActivateHandlerUPP	ActivHandPtr;				// UPP auf den Activate Handler	static pascal void	WindActivateHandlerProc(WindowRefX theWindow, Boolean activateWindow);	DragTrackingHandlerUPP	DragTrackHandPtr;	static pascal OSErr	MyTrackingHandler(short message, WindowPtr theWindow, void *handlerRefCon, DragReference theDrag);	DragReceiveHandlerUPP	DragReceiveHandPtr;	static pascal OSErr	MyReceiveDropHandler(WindowPtr theWindow, void *handlerRefCon, DragReference theDrag);	DragSendDataUPP			DragSendHandPtr;protected:	WindowRefX			WindRef;					// Referenz auf das Window	static void			CalcIdealDocumentSizeProc(WindowPtr theWindow, Rect *idealContentSize);	static pascal OSErr	MySendDataProc(FlavorType theFlavor, void *refCon, ItemReference theItem, DragReference theDrag);	Point				MinSize;					// minimale Fenstergröße (in Pixeln)	Point				MaxSize;					// maximale Fenstergröße (in Pixeln)	Point				SnapSize;					// Snapping beim Sizen des Fensters (Größe muß durch diese Werte teilbar sein)	Point				ToolbarOffset;				// Toolbar am oberen bzw. linken Rand	Point				SliderOffset;				// Slider am unteren bzw. rechten Rand	WindowScrapAttributes	ScrapAttr;				// Scrap-Verwaltungs-Flags	// Scrap-Funktionen:#if 0	virtual WindowScrapAttributes	GetScrapEnabled(void) { return 0L; };	// Menü-Flags für den Scrap, Default: Scrap nicht möglich	virtual void		SUndo(void) {};	virtual void		SCut(void) {};	virtual void		SCopy(void) {};	virtual void		SPaste(void) {};	virtual void		SClear(void) {};	virtual void		SSelectAll(void) {};#endif	// zwei Funktionen für den Support des Drag & Drop Manager	virtual OSErr		STracking(short message, DragReference theDrag) { UNUSED(message); UNUSED(theDrag); return dragNotAcceptedErr; };	virtual OSErr		SReceiveDrop(DragReference theDrag) { UNUSED(theDrag); return dragNotAcceptedErr; };	virtual OSErr		SStartDrag(EventRecord *theEvent) { UNUSED(theEvent); return noErr; };	virtual OSErr		SSendData(FlavorType theFlavor, ItemReference theItem, DragReference theDrag) { UNUSED(theFlavor); UNUSED(theItem); UNUSED(theDrag); return dragNotAcceptedErr; };	virtual void		CalcIdealDocumentSize(Rect *idealContentSize);	// optimale Windowgröße errechnen	virtual void		Adjust(void) { SetPort((GrafPtr)WindRef); };	// neue Fenstergröße wurde gesetzt	virtual void		Cursor() {};					// Mauszeiger im Window setzen	virtual void		Idle() {};						// Idle-Events	virtual void		Draw(void) {};					// Window updaten	virtual void		Klick(Point p, short clicks, Boolean &onItem) { UNUSED(p); UNUSED(clicks); onItem = false; };// Klick ins Window, ggf. Mehrfachklick	virtual void		GoAway(void) {};				// Klick in den Closer	virtual long		SleepTicks(void) { return 60; };// Ticks, die WaitNextEvent maximal wartet	virtual void		MausMoved(Point where, RgnHandle *mouseRgn);	virtual void		WindowMoved(Point where) { UNUSED(where); };public:	WindowRefX			GetWindow(void) { return WindRef; };	// Menü-Commandos	virtual Boolean	DoCommand(long cmd) { UNUSED(cmd); return false; };	virtual void		GetCommandStatus(long cmd, Boolean &enabled, short &markChar, Str255 &name) { UNUSED(cmd); UNUSED(enabled); UNUSED(markChar); UNUSED(name); };	inline void		Show(void) { ShowReferencedWindow(WindRef); };	inline void		Hide(void) { HideReferencedWindow(WindRef); };	inline void		Select(void) { SelectReferencedWindow(WindRef); };	Boolean				IsModal(void) { return WindowIsModal(WindRef); };	Boolean				IsFloating(void) { return GetWindowKindX(WindRef) == kApplicationFloaterKind; };	virtual void		Open(const Rect *boundsRect, ConstStr255Param title, Boolean visible,									WindowAttributes attributes, WindowScrapAttributes scrapattr, WindowRefX behind = nil);	virtual void		Open(short windResourceID, WindowScrapAttributes scrapattr, WindowRefX behind = nil);						WindowBase();	virtual			~WindowBase();	// Windowgröße ermitteln bzw. setzen	void				SetSize(short maxw, short maxh);	void				GetSize(short *maxw, short *maxh);	// Windowaktionen, wenn ein Event aufgetreten ist	virtual Boolean	EventKey(char key, short modifiers) { UNUSED(key); UNUSED(modifiers); SetPort((GrafPtr)WindRef); return false; };// Taste bei getoppten gedrückt, (true, wenn Taste angenommen wurde)	virtual void		EventActivate(Boolean flag) { UNUSED(flag); SetPort((GrafPtr)WindRef); };	// Window wurde aktiviert	virtual void		EventDraw(void);				// Window updaten	virtual void		EventDrag();					// Window soll gedraggt werden	virtual void		EventGrow();					// Window soll vergrößert/verkleinert werden	virtual void		EventKlick(Point p, short clicks);	// Klick ins Window, ggf. Mehrfachklick	virtual void		EventZoom(short partCode);		// Klick in die Zoom-Box	virtual void		EventGoAway(void);				// Klick in den Closer	// Aus einem WindowPtr den Ptr auf die WindowBase-Klasse ermitteln	static WindowBase	*Class(WindowPtr theWindow);	// Windowklasse des vordersten Fensters (kein Float!) ermitteln	static WindowBase	*BaseFrontWindow(void);	// einen Tastendruck an alle Floats und ans oberste non-Float-Fenster schicken	// true, wenn die Taste behandelt wurde	static Boolean		AllEventKey(long key, short modifiers);	// Mauszeiger richtig setzen	static void		AdjustCursor(Point where, RgnHandle *mouseRgn);	// Idle-Event für Windows	static void		AllEventIdle(void);	// Ticks, die WaitNextEvent maximal warten soll (für alle Fenster ermitteln)	static long		AllGetTicks(void);	// Grow-Icon ohne zusätzliche Linien zeichnen	static void		DrawGrowIcon(WindowRefX theWindow);	static void		EraseGrowIcon(WindowRefX theWindow);};