/*** *	Dialogbox-Klasse * *	©1994 Dekotec Info-Sys, Markus Fritze ***/#pragma once#include "WindowBase.h"#define kButtonFrameSize		3			// button frame’s pen size#define kButtonFrameInset		(-4)		// inset rectangle adjustment around button#define kControlInvisible		0#define kControlVisible			0xFF#define kCntlActive				0			// enabled control’s hilite state#define kCntlInactive			0xFF		// disabled control’s hilite state#define kCntlOn					1			// control’s value when truned on#define kCntlOff				0			// control’s value when truned off#define kSelect					1			// select the control#define kDeselect				0			// deselect the control#define kDelayTime				8			/* For the delay time when flashing the											   menubar and highlighting a button.											   8/60ths of a second */#include "DialogItems.h"class DialogBase : public WindowBase {	DObjHandle		ObjectInfo;			// unsere DObj-Resource (wenn vorhanden)	Boolean			inModalDialog;	short			*modalItem;public:	// Menü-Commandos	virtual Boolean		DoCommand(long cmd);	virtual void		GetCommandStatus(long cmd, Boolean &enabled, short &markChar, Str255 &name);	// einen DialogPtr in eine DialogBase umrechnen	static DialogBase	*Class(DialogPtr theDialog);	// DialogItem aus der ObjektInfo heraussuchen	DialogItem		*GetObject(short item);	virtual void	Open(short windResourceID, WindowRefX behind = nil);					DialogBase();	virtual			~DialogBase();	// Update Event für einen Redraw	virtual void	Draw(void);	// es wurde eine Taste gedrückt	virtual Boolean	EventKey(char key, short modifiers);	// Mausklick in die Dialogbox	virtual void	Klick(Point p, short clicks, Boolean &onItem);	// Activate Event	virtual void	EventActivate(Boolean flag);	// Idle Event (Cursorblinken	virtual void	Idle(void);	// ein Button bzw. Control wurde angeklickt (wird nur bei modalen Dialogen benutzt)	virtual void	Button(short button);	// der Closer wurde angeklickt (nur für modale Dialoge wichtig)	virtual void	EventGoAway(void);	// Ticks, wann WaitNextEvent() spätestens zurückkommt	virtual long	SleepTicks(void);	// Ersatz für ModalDialog()	short			ModalDialog(ModalFilterProcPtr modalFilter, short *itemHit);	// TextEdit-Handle und -Item des aktuellen Dialogs ermitteln (wenn vorhanden, sonst nil)	short			GetTE(TEHandle *hTE);	// Items in einem Dialog zählen	short			CountItems(void);	// Item für Tastatursteuerung aktivieren (in TextEdit z.B. komplett selektieren)	void			SelectInputItem(short item);	// DialogPtr der Klasse ermitteln	inline DialogPtr	GetDialogPtr(void) { return (DialogPtr)WindRef; };	// GrafPort auf den Dialog setzen	inline void		SetGraphicPort(void) { SetPort((GrafPtr)WindRef); };	// Mauszeiger innerhalb von TextEdit-Feldern auf einen Text-Cursor setzen	void			IBeamIt(void);	// ein beliebiges Control umrahmen	static void		OutlineControl(ControlHandle button);	// ein bestimmtes Objekt im aktuellen Dialog umrahmen	void			OutlineDialogItem(short item);	// Item kurz aufblinken lassen (opt. Feedback, wenn der User einen Button per Taste auslöst)	void			FlashControl(short item);	// ein einzelnes Item neu zeichnen	void			RedrawItem(short item, Boolean erase = true);	// Item sichtbar bzw. unsichtbar machen	void			HideItem(short item);	void			ShowItem(short item);	// Item enablen (true) oder disablen (false)	void			EnDisableItem(short item, Boolean flag);	// ControlHandle eines Objektes ermitteln	Handle			GetCH(short item);	// Dialog komplett erledigen	static short	Do(short resid, ModalFilterProcPtr modalFilter = nil);	// String in einem Textfeld setzen bzw. holen	void			SetDialogText(short item, ConstStr255Param s);	void			GetDialogText(short item, StringPtr s);	void			SetInteger(short object, long count);	long			GetInteger(short object);	// einiges mit Buttons anstellen	void			HiliteButton(short item, short flag);	void			PushRadioButton(short item, short first, short last);	void			ToggleButton(short item);	void			SetButton(short item, short flag);	short			GetButton(short item);	// Items direkt bearbeiten	void			SetUserItem(short item, UserItemUPP routine);	short			GetItemType(short item);	void			GetItemRect(short item, Rect *r);	void			SetItemRect(short item, Rect *r);};