/*	File:		WindowExtensions.h		Contains:	Prototypes and data structures for the floating window library		Written by:	Dean Yu		Copyright:	© 1993 Apple Computer, Inc., all rights reserved	*/#ifndef __WINDOWEXTENSIONS__#define __WINDOWEXTENSIONS__#ifndef __WINDOWS__#include <MacWindows.h>#endif#include <Dialogs.h>#include "InfinityWindoid.h"// Default to 68K calling conventions#ifndef USESROUTINEDESCRIPTORS#define USESROUTINEDESCRIPTORS 1#endif#ifndef __MIXEDMODE__#define kPascalStackBased								0#define STACK_ROUTINE_PARAMETER(paramCount, paramSize)	0#endif// Window Attributesenum WindowAttributesEnum {	kHasCloseBoxMask = 				0x00000001,	kHasZoomBoxMask = 				0x00000002,	kHasGrowBoxMask = 				0x00000004,	kHasModalBorderMask = 			0x00000010,	kHasThickDropShadowMask = 		0x00000020,	kHasDocumentTitlebarMask = 		0x00001000,	kHasPaletteTitlebarMask = 		0x00002000,	kHasRoundedTitlebarMask = 		0x00004000,// Attribute groupings	kWindowGadgetsMask =			0x0000000F,	kWindowAdornmentsMask =			0x00000FF0,	kWindowTitlebarMask =			0x000FF000};typedef unsigned long WindowAttributes;typedef struct WindowRecordExtensions *WindowRefX;// Activate event handler prototypetypedef pascal void (*ActivateHandlerProcPtr)(WindowRefX theWindow, Boolean activateWindow);enum {	uppActivateHandlerProcInfo = kPascalStackBased		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(WindowRefX)))		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(Boolean)))};#if USESROUTINEDESCRIPTORStypedef UniversalProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		CallUniversalProc((UniversalProcPtr)(userRoutine), uppActivateHandlerProcInfo, theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP) NewRoutineDescriptor((ProcPtr)userRoutine, uppActivateHandlerProcInfo, GetCurrentISA())#elsetypedef ActivateHandlerProcPtr ActivateHandlerUPP;#define CallActivateHandlerProc(userRoutine, theWindow, activateWindow)		\		(*userRoutine)(theWindow, activateWindow)#define NewActivateHandlerProc(userRoutine)		\		(ActivateHandlerUPP)(userRoutine)#endifenum {	kActivateWindow				= true,	kDeactivateWindow			= false};// Extensions to the WindowRecord#define WRMagic			'WNEX'#if powerc#pragma options align=mac68k#endifstruct WindowRecordExtensions {	DialogRecord				theWindow;	long						ID;	ActivateHandlerUPP			activateHandlerProc;	Boolean						wasVisible;};#if powerc#pragma options align=reset#endiftypedef struct WindowRecordExtensions WindowRecordExtensions;// Window procIDs and windowKindsenum {	kStandardDocumentWindowProc = kStandardWindowDefinition * 16,	kRoundedWindowProc = kRoundWindowDefinition * 16,		kApplicationFloaterKind = 7};// Error codesenum {	kUndefinedTitleBarTypeError = -1,	kWindowNotCreatedError = -2,	kInvalidWindowOrderingError = -3};#ifdef __cplusplusextern "C" {#endif// Floating window routinesextern OSErr NewWindowReference(WindowRefX *windowReference, const Rect *boundsRect, ConstStr255Param title, Boolean visible, WindowAttributes attributes, WindowRefX behind, long refCon, ActivateHandlerUPP activateHandlerProc);extern OSErr GetNewWindowReference(WindowRefX *windowReference, short windResourceID, WindowRefX behind, ActivateHandlerUPP activateHandlerProc);extern void DisposeWindowReference(WindowRefX windowReference);extern void SelectReferencedWindow(WindowRefX windowToSelect);extern void HideReferencedWindow(WindowRefX windowToHide);extern void ShowReferencedWindow(WindowRefX windowToShow);extern void DragReferencedWindow(WindowRefX windowToDrag, Point startPoint, const Rect *draggingBounds);extern WindowRefX FrontNonFloatingWindowX(void);extern WindowRefX LastFloatingWindow(void);extern Boolean WindowIsModal(WindowRefX windowReference);extern void DeactivateFloatersAndFirstDocumentWindow(void);extern void ActivateFloatersAndFirstDocumentWindow(void);extern void SuspendFloatingWindows(void);extern void ResumeFloatingWindows(void);extern pascal void ValidateWindowList(void);// Getters and Settersextern void GetWindowPortRect(WindowRefX windowReference, Rect *portRect);extern short GetWindowKindX(WindowRefX windowReference);extern void SetWindowKindX(WindowRefX windowReference, short windowKind);extern Boolean GetWindowVisible(WindowRefX windowReference);extern void SetWindowVisible(WindowRefX windowReference, Boolean windowVisible);extern Boolean GetWindowHilite(WindowRefX windowReference);extern void SetWindowHilite(WindowRefX windowReference, Boolean windowHilite);extern long GetWindowRefcon(WindowRefX windowReference);extern void SetWindowRefcon(WindowRefX windowReference, long refCon);extern WindowRefX GetNextWindowX(WindowRefX windowReference);extern void SetNextWindow(WindowRefX windowReference, WindowRefX nextWindow);extern RgnHandle GetContentRegion(WindowRefX windowReference);extern RgnHandle GetStructureRegion(WindowRefX windowReference);extern Handle GetWindowDefProc(WindowRefX windowReference);extern ActivateHandlerUPP GetActivateHandlerProc(WindowRefX windowReference);extern void SetActivateHandlerProc(WindowRefX windowReference, ActivateHandlerUPP activateHandlerProc);extern Boolean GetWasVisible(WindowRefX windowReference);extern void SetWasVisible(WindowRefX windowReference, Boolean wasVisible);#ifdef __cplusplus}#endif#endif